{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","db","jsonData","mongodb_url","mongodb_db","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","method","console","log","then","response","status","message","title","display_status","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","$$status","result","$$config","config","interpolated","target","mapToTextValue","map","d","i","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.db = { 'url' : instanceSettings.jsonData.mongodb_url, 'db' : instanceSettings.jsonData.mongodb_db }\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n    query.db = this.db\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    console.log('this is the url: ' + this.url)\n    console.log()\n    return this.doRequest({\n      url: this.url + '/',\n      data : { db : this.db },\n      method: 'POST',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: response.data.status, message: response.data.message, title: response.data.display_status };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      response.data.$$status = result.status;\n      response.data.$$config = result.config;\n    return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, '')\n        };\n    interpolated.db = this.db\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove place holder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, ''),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'      \n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}